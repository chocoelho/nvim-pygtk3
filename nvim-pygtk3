#!/usr/bin/env python3

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk, GLib, Gio, Vte, Pango
import neovim
import uuid
import os.path
import threading
import sys


class NeovimColors(object):

    EVENTS = ['ColorScheme']

    def __init__(self, win):
        self.win = win
        self.settings = self.win.get_settings()

    def do_gtk_start(self):
        self.rgba = Gdk.RGBA()

    def do_vim_start(self):
        self._vim_update()
        self.win.vim_connect_au(NeovimColors.EVENTS, '*', self._vim_update)

    def _vim_update(self):
        dark = self.win.vim.options['bg'] == 'dark'
        color = self.win.vim.eval('synIDattr(hlID("Normal"),"bg")')
        GLib.idle_add(lambda: self._gtk_update(dark, color))

    def _gtk_update(self, dark, color):
        self.settings.props.gtk_application_prefer_dark_theme = dark
        self.rgba.parse(color)
        self.win.term.set_color_background(self.rgba)


class NeovimFont(object):

    SCHEMA = 'org.gnome.desktop.interface'

    def __init__(self, win):
        self.win = win
        self.enabled = Gio.SettingsSchemaSource.get_default().lookup(NeovimFont.SCHEMA, True)

    def do_gtk_start(self):
        if not self.enabled:
            return
        self.settings = Gio.Settings(NeovimFont.SCHEMA)
        self.settings.connect('changed', lambda *args: GLib.idle_add(self._gtk_update))

    def do_vim_start(self):
        if not self.enabled:
            return
        GLib.idle_add(self._gtk_update)

    def _gtk_update(self):
        font = self.settings.get_string('monospace-font-name')
        self.win.term.set_font(Pango.FontDescription(string=font))


class NeovimTabbar(object):

    EVENTS = ['TabEnter',
              'TabLeave',
              'TabNew',
              'TabClosed',
              'BufEnter',
              'BufLeave',
              'TermClose']

    def __init__(self, win):
        self.win = win
        self.tabs = []
        self.widget = Gtk.Notebook()

    def do_gtk_start(self):
        pass

    def do_vim_start(self):
        self.win.vim.options['showtabline'] = 0
        self.win.vim_connect_au(NeovimTabbar.EVENTS, '*', self._vim_update)

    def _vim_fetch(self):
        return [(self.win.vim_bufname(t.window.buffer.name),
                 self.win.vim.current.tabpage == t)
                for t in sorted(self.win.vim.tabpages, key=lambda t: t.handle)
                if t.valid]

    def _vim_update(self):
        info = self._vim_fetch()
        if self.tabs != info:
            self.tabs = info
            GLib.idle_add(self._gtk_update)

    def _gtk_update(self):
        self.widget.destroy()
        self.widget = Gtk.Notebook()
        if len(self.tabs) < 2:
            return
        for name, cur in self.tabs:
            page = Gtk.Box()
            self.widget.append_page(page, Gtk.Label(name))
            page.show_all()
            if cur:
                self.widget.set_current_page(self.widget.get_n_pages() - 1)
        self.win.box.pack_start(self.widget, False, True, 0)
        self.widget.show_all()


class NeovimWindow(Gtk.ApplicationWindow):

    def __init__(self, *args, **kwargs):
        super().__init__(*args,
                         default_width=640,
                         default_height=480,
                         **kwargs)
        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL,
                           parent=self)
        self.term = Vte.Terminal(scrollback_lines=0,
                                 scroll_on_output=False,
                                 scroll_on_keystroke=True,
                                 rewrap_on_resize=False)
        self.box.pack_end(self.term, True, True, 0)
        self.term.grab_focus()
        self.term.set_mouse_autohide(True)
        self.path = os.path.join(GLib.get_tmp_dir(), 'nvim-{}').format(uuid.uuid4())
        self.modules = [NeovimTabbar(self),
                        NeovimColors(self),
                        NeovimFont(self)]

    def start(self, argv):
        spawn_args = [Vte.PtyFlags.DEFAULT,
                      None,
                      ['nvim', '+runtime! ginit.vim', *argv],
                      ['NVIM_LISTEN_ADDRESS={}'.format(self.path),
                       'NVIM_TUI_ENABLE_CURSOR_SHAPE=1'],
                      GLib.SpawnFlags.SEARCH_PATH,
                      None,
                      None,
                      None]
        if not self.term.spawn_sync(*spawn_args):
            self.close()
        self.term.connect('child-exited', lambda *args: self.term.get_toplevel().close())
        self.show_all()
        self.connect('notify::is-maximized', lambda *args: GLib.idle_add(self.do_resize))
        for module in self.modules:
            module.do_gtk_start()
        threading.Thread(target=self.vim_start_loop, daemon=True).start()

    def do_resize(self):
        rows = self.term.get_row_count()
        cols = self.term.get_column_count()
        self.term.props.pty.set_size(rows - 1, cols - 1)
        self.term.props.pty.set_size(rows, cols)

    def vim_add_callback(self, callback, *args):
        id = str(len(self.vim_callbacks))
        self.vim.subscribe(id)
        self.vim_callbacks[id] = callback
        args = ','.join(['"{}"'.format(id), *args])
        return 'rpcnotify({},{})'.format(self.vim.channel_id, args)

    def vim_connect_au(self, events, pattern, callback, *args):
        cb = self.vim_add_callback(callback, *args)
        events = ','.join(events)
        self.vim.command('au {} {} cal {}'.format(events, pattern, cb))

    def vim_bufname(self, name):
        return (self.vim.eval('pathshorten(fnamemodify("{}",":~:."))'.format(name))
                if name else '[No Name]')

    def vim_start_loop(self):
        self.vim_callbacks = {}
        self.vim = neovim.attach('socket', path=self.path)
        for module in self.modules:
            module.do_vim_start()
        self.vim.run_loop(lambda: None, self.do_vim_event)

    def do_vim_event(self, label, args):
        if label in self.vim_callbacks:
            self.vim_callbacks[label](*args)


class NeovimApplication(Gtk.Application):

    def __init__(self):
        super().__init__(application_id='org.nvim-pygtk3',
                         flags=Gio.ApplicationFlags.HANDLES_COMMAND_LINE)

    def do_command_line(self, command_line):
        win = NeovimWindow(title='Neovim', application=self)
        win.start(command_line.get_arguments())


if __name__ == '__main__':
    NeovimApplication().run(sys.argv[1:])
